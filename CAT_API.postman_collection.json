{
	"info": {
		"_postman_id": "071a7dac-1de6-4eff-8438-0ef38910e5a0",
		"name": "CAT-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33841208"
	},
	"item": [
		{
			"name": "övriga requests",
			"item": [
				{
					"name": "2 (man) get one image of specified breed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains image URL and matches specified breed\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.length).to.be.above(0);\r",
									"\r",
									"    // får bildens url\r",
									"    const imageUrl = responseJson[0].url;\r",
									"    pm.expect(imageUrl).to.include(\"https://cdn2.thecatapi.com/images/\");\r",
									"\r",
									"    // får ras id från respons\r",
									"    const breedId = responseJson[0].breeds[0].id;\r",
									"\r",
									"    // kollar att ras id stämmer med sökt id som är lik med \"abys\"\r",
									"    pm.expect(breedId).to.eql(\"abys\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "live_7iiNlWVrlyxcUhYzWx9P66jMqZuVpFvUli1S8xlBa53gPSXVI3kIE4L54Po0y38p",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.thecatapi.com/v1/images/search?breed_id=abys",
							"protocol": "https",
							"host": [
								"api",
								"thecatapi",
								"com"
							],
							"path": [
								"v1",
								"images",
								"search"
							],
							"query": [
								{
									"key": "breed_id",
									"value": "abys"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1 (man) get one image of cat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//kollar att svaret inehåller url\r",
									"pm.test(\"Response contains image URL\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson[0].url).to.include(\"https://cdn2.thecatapi.com/images/\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "live_7iiNlWVrlyxcUhYzWx9P66jMqZuVpFvUli1S8xlBa53gPSXVI3kIE4L54Po0y38p",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.thecatapi.com/v1/images/search",
							"protocol": "https",
							"host": [
								"api",
								"thecatapi",
								"com"
							],
							"path": [
								"v1",
								"images",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 (man) get a breed with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains appropriate error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message).to.eql(\"404 - please consult the documentation for correct url to call. https://docs.thecatapi.com/\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "live_7iiNlWVrlyxcUhYzWx9P66jMqZuVpFvUli1S8xlBa53gPSXVI3kIE4L54Po0y38p",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.thecatapi.com/v1/search?breed_id=loremipsum",
							"protocol": "https",
							"host": [
								"api",
								"thecatapi",
								"com"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "breed_id",
									"value": "loremipsum"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1-Svarstid (Auto)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let threshold = 450;\r",
									"\r",
									"pm.test(\"Is the response time below the threshold?\", function () {\r",
									"     \r",
									"     let responseTime = pm.response.responseTime;\r",
									"     pm.expect(responseTime).to.be.below(threshold);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.thecatapi.com/v1/images/search",
							"protocol": "https",
							"host": [
								"api",
								"thecatapi",
								"com"
							],
							"path": [
								"v1",
								"images",
								"search"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Concurrent Requests. Verification of the cat breed images",
			"item": [
				{
					"name": "Concurrent Requests Verify Cat Breed Images",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Variable containing a list of cat breeds for the test\r",
									"const catBreeds = ['beng', 'siam', 'pers', 'abys', 'tang', 'bomb', 'chau', 'buri'];\r",
									"\r",
									"// Iterating over each cat breed\r",
									"_.each(catBreeds, function(breed) {\r",
									"    // Sending a GET request to fetch an image of a specific cat breed\r",
									"    pm.sendRequest({\r",
									"        params: {\r",
									"            breed_id: breed\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        // Checking that the response contains a correct status code\r",
									"        pm.test('Status code is 200', function() {\r",
									"            pm.response.to.have.status(200);\r",
									"        });\r",
									"        // Checking that the response is in a valid JSON format\r",
									"        pm.test('Response is valid JSON', function() {\r",
									"            pm.response.to.be.json;\r",
									"        });\r",
									"        // Checking that the response contains an image URL\r",
									"        pm.test('Response contains image URL', function() {\r",
									"            pm.expect(pm.response.json()[0].url).to.exist;\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "live_7iiNlWVrlyxcUhYzWx9P66jMqZuVpFvUli1S8xlBa53gPSXVI3kIE4L54Po0y38p",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.thecatapi.com/v1/images/search",
							"protocol": "https",
							"host": [
								"api",
								"thecatapi",
								"com"
							],
							"path": [
								"v1",
								"images",
								"search"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains tests that utilize concurrent requests **to verify the functionality of fetching** cat breed images from the API. By sending multiple requests simultaneously, these tests aim to ensure the API's ability to handle concurrent requests efficiently and accurately. The tests validate that the responses contain correct status codes, are in a valid JSON format, and include image URLs for various cat breeds. Concurrent request testing **helps assess the API's performance and scalability** under load."
		},
		{
			"name": "Custom Property comparison",
			"item": [
				{
					"name": "Fetch Cat Breed Properties Comparison",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Send a GET request to fetch data about the first cat breed\r",
									"pm.sendRequest({\r",
									"    params: {\r",
									"        q: 'breed1' // Name of the first cat breed\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    const firstBreed = pm.response.json()[0]; // Get data about the first cat breed\r",
									"console.log(firstBreed)\r",
									"\r",
									"    // Send a GET request to fetch data about the second cat breed\r",
									"    pm.sendRequest({\r",
									"        params: {\r",
									"            q: 'breed2' // Name of the second cat breed\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        const secondBreed = pm.response.json()[1]; // Get data about the second cat breed\r",
									"console.log(secondBreed)\r",
									"\r",
									"        // Check that properties of two cat breeds are different\r",
									"        pm.test('Properties of two cat breeds are different', function() {\r",
									"            // Compare selected properties of two cat breeds\r",
									"            pm.expect(firstBreed.description).to.not.eql(secondBreed.description); // Property 1\r",
									"            pm.expect(firstBreed.temperament).to.not.eql(secondBreed.temperament); // Property 2\r",
									"    \r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.thecatapi.com/v1/breeds",
							"protocol": "https",
							"host": [
								"api",
								"thecatapi",
								"com"
							],
							"path": [
								"v1",
								"breeds"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains tests designed **to compare the properties** of two cat breeds retrieved from The Cat API using custom JavaScript test scripts in Postman. The tests aim to verify that the selected properties of the two cat breeds differ in specified ways. These tests help ensure the accuracy and reliability of the API's response data by comparing the characteristics of different cat breeds."
		},
		{
			"name": "Data Consistency",
			"item": [
				{
					"name": "5-Get a list of breeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.response.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.thecatapi.com/v1/breeds",
							"protocol": "https",
							"host": [
								"api",
								"thecatapi",
								"com"
							],
							"path": [
								"v1",
								"breeds"
							]
						}
					},
					"response": []
				},
				{
					"name": "5-Get breed by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Breed id matches\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get('id'));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.thecatapi.com/v1/images/search?breed_ids",
							"protocol": "https",
							"host": [
								"api",
								"thecatapi",
								"com"
							],
							"path": [
								"v1",
								"images",
								"search"
							],
							"query": [
								{
									"key": "breed_ids",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4 (man) get a list of breeds with limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains results\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct number of results\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.length).to.eql(5); // Antal resultat per sida\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "live_7iiNlWVrlyxcUhYzWx9P66jMqZuVpFvUli1S8xlBa53gPSXVI3kIE4L54Po0y38p",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.thecatapi.com/v1/breeds?limit=5&page=1",
					"protocol": "https",
					"host": [
						"api",
						"thecatapi",
						"com"
					],
					"path": [
						"v1",
						"breeds"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5 (man)  get a breeds with specified temperament",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains 'playful' temperament\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    const allTemperaments = responseJson.map(obj => obj.temperament);\r",
							"    const expectedTemperament = \"lively\";\r",
							"\r",
							"    pm.expect(allTemperaments.every(temperament => temperament.includes(expectedTemperament))).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "live_7iiNlWVrlyxcUhYzWx9P66jMqZuVpFvUli1S8xlBa53gPSXVI3kIE4L54Po0y38p",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.thecatapi.com/v1/breeds/search?temperament=lively\n\n",
					"protocol": "https",
					"host": [
						"api",
						"thecatapi",
						"com"
					],
					"path": [
						"v1",
						"breeds",
						"search"
					],
					"query": [
						{
							"key": "temperament",
							"value": "lively\n\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "10 (man) test response time duration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response time meets the predefined performance criteria\", function () {\r",
							"    const timeResponse = pm.response.responseTime;\r",
							"console.log(\"Response time for breed image: \" + responseTime + \" mc\");\r",
							"\r",
							"// performance criteria\r",
							"const expectedResponseTime = 600; \r",
							"if (timeResponse > expectedResponseTime) {\r",
							"    console.error(\"Response time is longer than expected\");\r",
							"}\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "live_7iiNlWVrlyxcUhYzWx9P66jMqZuVpFvUli1S8xlBa53gPSXVI3kIE4L54Po0y38p",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.thecatapi.com/v1/images/search?breed_ids=beng",
					"protocol": "https",
					"host": [
						"api",
						"thecatapi",
						"com"
					],
					"path": [
						"v1",
						"images",
						"search"
					],
					"query": [
						{
							"key": "breed_ids",
							"value": "beng"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2-Response Headers(Automat)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains image URL\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].url).to.be.a('string');\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.thecatapi.com/v1/images/search?limit=10",
					"protocol": "https",
					"host": [
						"api",
						"thecatapi",
						"com"
					],
					"path": [
						"v1",
						"images",
						"search"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2(man)get cat picture by breed",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "live_nUHcDKgLHM8cOzVjVw5WuiVZw60TazuFVDvWMf696dqfu3Vkr0r4st4sFzCycQUg",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.thecatapi.com/v1/images/search?limit=1&breed_ids=abys",
					"protocol": "https",
					"host": [
						"api",
						"thecatapi",
						"com"
					],
					"path": [
						"v1",
						"images",
						"search"
					],
					"query": [
						{
							"key": "limit",
							"value": "1"
						},
						{
							"key": "breed_ids",
							"value": "abys"
						}
					]
				}
			},
			"response": []
		}
	]
}